You are given two strings start and target, both of length n. Each string consists only of the characters 'L', 'R', and '_' where:

The characters 'L' and 'R' represent pieces, where a piece 'L' can move to the left only if there is a blank space directly to its left, and a piece 'R' can move to the right only if there is a blank space directly to its right.
The character '_' represents a blank space that can be occupied by any of the 'L' or 'R' pieces.
Return true if it is possible to obtain the string target by moving the pieces of the string start any number of times. Otherwise, return false.

CODE:

if (!start.replace("_", "").equals(target.replace("_", ""))) {
            return false;
        }

        // Step 2: Verify constraints for 'L' and 'R'
        int sIndex = 0, tIndex = 0;
        int n = start.length();

        while (sIndex < n && tIndex < n) {
            // Move pointers to the next 'L' or 'R'
            while (sIndex < n && start.charAt(sIndex) == '_') sIndex++;
            while (tIndex < n && target.charAt(tIndex) == '_') tIndex++;

            // If one pointer reaches the end, both should reach simultaneously
            if (sIndex == n || tIndex == n) return sIndex == tIndex;

            // Check character match
            if (start.charAt(sIndex) != target.charAt(tIndex)) return false;

            // Check movement rules
            if (start.charAt(sIndex) == 'L' && sIndex < tIndex) return false; // 'L' cannot move right
            if (start.charAt(sIndex) == 'R' && sIndex > tIndex) return false; // 'R' cannot move left

            // Move to the next character
            sIndex++;
            tIndex++;
        }

        return true;
    }
